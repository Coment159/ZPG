#version 330 core


// Inputs
in vec3 Normal;
in vec3 FragPos;
in vec2 VerTex;

// Material structure
struct Material {
    vec3 diffColor;
    vec3 specColor;
    vec3 ambientColor;
    float shine;
};

// Light structure
struct Light {
    vec3 type;          // x: Spot, y: Directional, z: Flashlight
    vec3 position;
    vec3 lightDirection;
    vec3 color;
    float cutOff;       // For spotlight
};

// Outputs
out vec4 frag_colour;

// Uniforms
uniform sampler2D textureUnitID; // Texture sampler
uniform Light lights[10];
uniform Material material;
uniform int numberOfLights;
uniform vec3 viewPos;

// Constants
const float ambientStrength = 0.1; // Global ambient strength
const float specularStrength = 0.5;

void main() {
    vec3 result = vec3(0.0);

    // Precompute common values
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);

    // Sample texture color
    vec4 texColor = texture(textureUnitID, VerTex);

    for (int i = 0; i < numberOfLights; i++) {
        vec3 ambient = ambientStrength * lights[i].color * material.ambientColor * texColor.rgb;
        vec3 lightDir;
        float attenuation = 1.0;

        // SPOT LIGHT
        if (lights[i].type.x == 1) {
            lightDir = normalize(lights[i].position - FragPos);
            float distance = length(lights[i].position - FragPos);
            attenuation = 1.0 / (distance + 0.512 * (distance * distance));

            // Spotlight-specific calculation
            float diff = max(dot(norm, lightDir), 0.0);
            vec3 diffuse = diff * lights[i].color * material.diffColor;

            vec3 reflectDir = reflect(-lightDir, norm);
            float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shine);
            vec3 specular = specularStrength * spec * lights[i].color * material.specColor;

            ambient *= attenuation;
            diffuse *= attenuation;
            specular *= attenuation;

            result += ambient + diffuse + specular;
        }

        // DIRECTIONAL LIGHT
        else if (lights[i].type.y == 1) {
            lightDir = normalize(lights[i].lightDirection);

            // Directional light calculation
            float diff = max(dot(norm, lightDir), 0.0);
            vec3 diffuse = diff * lights[i].color * material.diffColor;

            vec3 reflectDir = reflect(-lightDir, norm);
            float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shine);
            vec3 specular = specularStrength * spec * lights[i].color * material.specColor;

            result += ambient + diffuse + specular;
        }

        // FLASHLIGHT
        else if (lights[i].type.z == 1) {
            lightDir = normalize(lights[i].position - FragPos);
            float distance = length(lights[i].position - FragPos);
            attenuation = 1.0 / (distance + 0.64 * (distance * distance));

            vec3 reflectVector = normalize(reflect(-lightDir, norm));
            float diff = max(dot(lightDir, norm), 0.0);
            float spec = pow(max(dot(reflectVector, viewDir), 0.0), material.shine);

            float spot = dot(normalize(lights[i].lightDirection), -lightDir);
            if (spot < lights[i].cutOff) {
                diff = 0.0;
                spec = 0.0;
            } else {
                spot = (spot - lights[i].cutOff) / (1.0 - lights[i].cutOff);
                spot = clamp(spot, 0.0, 1.0);
            }

            diff *= attenuation;
            spec *= attenuation;

            result += ((diff + spec) * spot) * lights[i].color;
        }
    }

    // Combine texture color with the lighting result
    vec3 finalColor = texColor.rgb * result;

    // Output the final fragment color
    frag_colour = vec4(finalColor, 1.0);
}
