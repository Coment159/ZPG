#version 330 core

in vec3 Normal;
in vec3 FragPos;

out vec4 frag_colour;

#define MAX_LIGHTS 4

// Definice struktury svìtla
struct Light {
    vec3 position;
    vec3 color;
};

uniform Light lights[MAX_LIGHTS];
uniform int numberOfLights; // Aktuální poèet aktivních svìtel

// Camera Position
uniform vec3 viewPos;

void main() {
    // Inicializace výsledné barvy jako èerné
    vec3 result = vec3(0.0);

    // Normála a smìr pohledu
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);

    // Nastavení základních hodnot ambientního a spekulárního osvìtlení
    float ambientStrength = 0.01;
    float specularStrength = 0.5;

    // Pro všechna svìtla v poli
    for (int i = 0; i < numberOfLights; i++) {
        // Ambientní složka (každé svìtlo pøispívá svou barvou)
        vec3 ambient = ambientStrength * lights[i].color;

        // Difúzní složka
        vec3 lightDir = normalize(lights[i].position - FragPos);
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = diff * lights[i].color;

        // Spekulární složka
        vec3 reflectDir = reflect(-lightDir, norm);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), 1024);
        vec3 specular = specularStrength * spec * lights[i].color;

        // Pøiètení pøíspìvku aktuálního svìtla
        result += ambient + diffuse + specular;
    }

    // Výsledná barva
    frag_colour = vec4((result * vec3( 0.385, 0.647, 0.812)), 1.0);
}
